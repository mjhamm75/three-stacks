import { app, BrowserWindow, ipcMain } from "electron";
import { exec } from "child_process";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.handle("getProcessRunningTime", async (_event, port: number) => {
    const pid = await getPid(port);
    if (pid) {
      const runningTime = await getProcessRunningTime(pid);
      return runningTime;
    }
    return "Bad port";
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const getPid = (port: number): Promise<string | null> => {
  return new Promise((resolve, reject) => {
    // TODO | head -n 1 grabs the first line of the output. How to make this more robust in case there are multiple processes running?
    exec(`lsof -Fp -i :${port} | head -n 1`, (error, stdout, stderr) => {
      if (error) {
        console.error(`error: ${error}`, stderr);
        reject(stderr);
      }

      resolve(stdout.split("p")[1]);
    });
  });
};

const getProcessRunningTime = (pid: string) => {
  return new Promise((resolve, reject) => {
    exec(`ps -o etime= -p ${pid}`, (error, stdout, stderr) => {
      if (error) {
        reject(stderr);
      }

      resolve(stdout.trim());
    });
  });
};
